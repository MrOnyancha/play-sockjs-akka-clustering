# This is the main configuration file for the application.
# ~~~~~

# Secret key
# ~~~~~
# The secret key is used to secure cryptographics functions.
# If you deploy your application to several instances be sure to use the same key!
application.secret = "%APPLICATION_SECRET%"

# The application languages
# ~~~~~
application.langs = "en"


server_ip = "35.233.236.226"
//myhost = "127.0.0.1"
//myport = 0
myhost = ${?HOST}
myport = ${?PORT}

# Global object class
# ~~~~~
# Define the Global object class for this application.
# Default to Global in the root package.
# application.global=Global

# Router
# ~~~~~
# Define the Router object to use for this application.
# This router will be looked up first when the application is starting up,
# so make sure this is the entry point.
# Furthermore, it's assumed your route file is named properly.
# So for an application router like `my.application.Router`,
# you may need to define a router file `conf/my.application.routes`.
# Default to Routes in the root package (and conf/routes)
# application.router=my.application.Routes

# Database configuration
# ~~~~~
# You can declare as many datasources as you want.
# By convention, the default datasource is named `default`
#
# db.default.driver=org.h2.Driver
# db.default.url="jdbc:h2:mem:play"
# db.default.user=sa
# db.default.password=""

# Evolutions
# ~~~~~
# You can disable evolutions if needed
# evolutionplugin=disabled

# Logger
# ~~~~~
# You can also configure logback (http://logback.qos.ch/),
# by providing an application-logger.xml file in the conf directory.

# Root logger:
logger.root = ERROR

# Logger used by the framework:
logger.play = DEBUG

# Logger provided to your application:
logger.application = DEBUG

auth = "http://www.fileformat.info/tool/guid.htm?count=1&format=text"


akka {
  loglevel = DEBUG
  loggers = ["akka.event.slf4j.Slf4jLogger"]
  logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"

  actor {
    provider = "akka.cluster.ClusterActorRefProvider"
    debug {
      receive = on
      lifecycle = on
    }
  }

  remote {
    enabled-transports = ["akka.remote.netty.tcp"]
//    log-remote-lifecycle-events = off
    netty.tcp {
//      hostname = ${myhost}
//      hostname = "10.128.0.3"//${myhost}
      hostname = "10.166.0.2"//${myhost}
//      port = ${myport}
      port = 2551
    }
  }

  cluster {
    seed-nodes = [
      "akka.tcp://application@10.128.0.3:2551"
//      "akka.tcp://application@35.228.236.5:2551"
//      "akka.tcp://application@"${myhost}":"${myport}
//      "akka.tcp://application@35.228.236.5:2551"
//            "akka.tcp://application@"${myhost}":2551"
    ]
   // auto-down-unreachable-after = 10s

  }
}

akka.persistence.journal.plugin = "akka.persistence.journal.leveldb"
//akka.persistence.snapshot-store.plugin = "akka.persistence.snapshot-store.local"
akka.persistence.journal.leveldb.dir = "target/journal"
//akka.persistence.snapshot-store.local.dir = "target/snapshots"


redis {
  host = ${server_ip}
  # redis server: port
  port = 6379
  # redis server: database number (optional)
  database = 0
  # authentication password (optional)
  password = f30947750c70c88f7f8be99315a33155d6d6b32db5d1ade6d96ceea6dd2ecc1c
}




