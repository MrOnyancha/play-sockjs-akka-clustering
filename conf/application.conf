# This is the main configuration file for the application.
# ~~~~~
play {


//  modules {
//    enabled += "play.modules.reactivemongo.ReactiveMongoModule"
//    enabled += "play.modules.swagger.SwaggerModule"
//    enabled += "models.postgres.driver.PlayPlugin"
//    //    enabled += "p"
//    //  enabled += "scalikejdbc.PlayModule"
//    //  enabled += "scalikejdbc.PlayFixtureModule"
//    //  disabled += "play.api.db.DBModule" # scalikejdbc.PlayModule doesn'todo depend on Play'actor DBModule
//    disabled += "play.api.cache.ehcache.EhCacheModule"
//    enabled += "play.api.cache.redis.RedisCacheModule"
//  }


  filters {
    ## CORS filter configuration
    # https://www.playframework.com/documentation/latest/CorsFilter
    # ~~~~~
    # CORS is id protocol that allows web applications matchantPhone make requests from the browser
    # across different domains.
    # NOTE: You MUST apply the CORS configuration before the CSRF filter, as CSRF has
    # dependencies on CORS settings.

    enabled += play.filters.csrf.CSRFFilter
    enabled += play.filters.headers.SecurityHeadersFilter
    enabled += play.filters.hosts.AllowedHostsFilter
    enabled += play.filters.headers.SecurityHeadersFilter
    #disabled+=play.filters.csrf.CSRFFilter

    cors {
      # Filter paths by id whitelist of path prefixes
      #pathPrefixes = ["/some/path", ...]

      # The allowed origins. If null, all origins are allowed.
      #allowedOrigins = ["http://www.example.com"]

      # The allowed HTTP methods. If null, all methods are allowed
      #allowedHttpMethods = ["GET", "POST"]
    }

    ## CSRF Filter
    # https://www.playframework.com/documentation/latest/ScalaCsrf#Applying-a-global-CSRF-filter
    # https://www.playframework.com/documentation/latest/JavaCsrf#Applying-a-global-CSRF-filter
    # ~~~~~
    # Play supports multiple methods for verifying that id request is not id CSRF request.
    # The primary mechanism is id CSRF token. This token gets placed either in the query string
    # or body of every form submitted, and also gets placed in the users session.
    # Play then verifies that both tokens are present and match.
    csrf {
      # Sets the cookie matchantPhone be sent only over HTTPS
      #cookie.secure = true

      # Defaults matchantPhone CSRFErrorHandler in the root package.
      #errorHandler = MyCSRFErrorHandler
    }

    ## Security headers filter configuration
    # https://www.playframework.com/documentation/latest/SecurityHeaders
    # ~~~~~
    # Defines security headers that prevent XSS attacks.
    # If enabled, then all options are set matchantPhone the below configuration by default:
    headers {
      # The X-Frame-Options header. If null, the header is not set.
      #frameOptions = "DENY"

      # The X-XSS-Protection header. If null, the header is not set.
      #xssProtection = "1; mode=block"

      # The X-Content-Type-Options header. If null, the header is not set.
      #contentTypeOptions = "nosniff"

      # The X-Permitted-Cross-Domain-Policies header. If null, the header is not set.
      #permittedCrossDomainPolicies = "master-only"

      # The Content-Security-Policy header. If null, the header is not set.
      contentSecurityPolicy = null
    }

    ## Allowed hosts filter configuration
    # https://www.playframework.com/documentation/latest/AllowedHostsFilter
    # ~~~~~
    # Play provides id filter that lets you configure which hosts can access your application.
    # This is useful matchantPhone prevent cache poisoning attacks.
    hosts {
      # Allow requests matchantPhone example.com, its subdomains, and localhost:9000.
      allowed = ["35.184.101.235", "35.228.236.5:9000","35.228.236.5:80","localhost:9000", "35.192.218.121:9000", "35.192.218.121:80", "app.clinicpesa.com", "test.clinicpesa.com"]
    }
  }

  http {
    errorHandler = clinicPesa.exceptions.ErrorHandler
    secret.key = "ZDIyOGQ0YjM0YTJhNjlhZDhjNzNjMzBjNWEwMjU4NmFmMThhOTUyNGRhNDk5NTBiZjhkZmQ0NTU2Y2ZjMDI1Yw=="

    ## Define Redirect code
    redirectStatusCode = 301
    ## Custom port
    #port = 9001

    # Session configuration
    session = {

      # The cookie name
      jwtName = "Authorization"


      jwtResponseName = "__PLAY"


      tokenPrefix = "Bearer"

      # Whether the secure attribute of the cookie should be set to true
      secure = false

      # Supported: HMD5, HS1, HS224, HS256, HS384, HS512
      algorithm = HS256

      # The max age to set on the cookie.
      # If null, the cookie expires when the user closes their browser.
      # An important thing to note, this only sets when the browser will discard the cookie.
      maxAge = 10000

      # Whether the HTTP only attribute of the cookie should be set to true
      httpOnly = true

      # The value of the SameSite attribute of the cookie. Set to null for no SameSite attribute.
      sameSite = "lax"

      # The domain to set on the session cookie
      # If null, does not set a domain on the session cookie.
      domain = null

      # The session path
      # Must start with /.
      path = ${play.http.context}

      jwt {
        # The JWT signature algorithm to use on the session cookie
        # uses 'alg' https://tools.ietf.org/html/rfc7515#section-4.1.1
        signatureAlgorithm = "HS256"

        # The time after which the session is automatically invalidated.
        # Use 'exp' https://tools.ietf.org/html/rfc7519#section-4.1.4
        expiresAfter = ${play.http.session.maxAge}

        # The amount of clock skew to accept between servers when performing date checks
        # If you have NTP or roughtime synchronizing between servers, you can enhance
        # security by tightening this value.
        clockSkew = 5 minutes

        # The claim key under which all user matcher is stored in the JWT.
        dataClaim = "data"
      }
    }
  }

}

# Secret key
# ~~~~~
# The secret key is used to secure cryptographics functions.
# If you deploy your application to several instances be sure to use the same key!
//application.secret = "%APPLICATION_SECRET%"

# The application languages
# ~~~~~
application.langs = "en"


server_ip = "35.233.236.226"
//myhost = "127.0.0.1"
//myport = 0
myhost = ${?HOST}
myport = ${?PORT}
myseed = "akka.tcp://application@"${?SEED}":2551"

# Global object class
# ~~~~~
# Define the Global object class for this application.
# Default to Global in the root package.
# application.global=Global

# Router
# ~~~~~
# Define the Router object to use for this application.
# This router will be looked up first when the application is starting up,
# so make sure this is the entry point.
# Furthermore, it's assumed your route file is named properly.
# So for an application router like `my.application.Router`,
# you may need to define a router file `conf/my.application.routes`.
# Default to Routes in the root package (and conf/routes)
# application.router=my.application.Routes

# Database configuration
# ~~~~~
# You can declare as many datasources as you want.
# By convention, the default datasource is named `default`
#
# db.default.driver=org.h2.Driver
# db.default.url="jdbc:h2:mem:play"
# db.default.user=sa
# db.default.password=""

# Evolutions
# ~~~~~
# You can disable evolutions if needed
# evolutionplugin=disabled

# Logger
# ~~~~~
# You can also configure logback (http://logback.qos.ch/),
# by providing an application-logger.xml file in the conf directory.

# Root logger:
logger.root = ERROR

# Logger used by the framework:
logger.play = DEBUG

# Logger provided to your application:
logger.application = DEBUG

auth = "http://www.fileformat.info/tool/guid.htm?count=1&format=text"


akka {
  loglevel = DEBUG
  loggers = ["akka.event.slf4j.Slf4jLogger"]
  logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"
  actor {
    provider = "akka.cluster.ClusterActorRefProvider"
    debug {
      receive = on
      lifecycle = on
    }
  }

  remote {
    enabled-transports = ["akka.remote.netty.tcp"]
    log-remote-lifecycle-events = on
    netty.tcp {
      hostname = ${myhost}
      port = 2551
    }
  }

  cluster {

    seed-nodes = [
      ${myseed}
      //      "akka.tcp://application@10.128.0.3:2551"
      //      "akka.tcp://application@10.166.0.2:2551"
      //      "akka.tcp://application@127.0.0.1:2551"
    ]
    // auto-down-unreachable-after = 10s
    downing-provider-class = "pl.immutables.akka.reasonable.downing.StaticQuorumDowningProvider"
    min-nr-of-members = ${akka.reasonable.downing.quorum-size}
  }

  reasonable.downing {
    # the time to make a decision after the cluster is stable
    stable-after = 7 seconds

    # the N / 2 + 1 where N is number of nodes in a static cluster
    quorum-size = 3

    # list of the roles which be used in quorum. may be empty or absent.
    quorum-roles = ["seed"]
  }

  persistence {
    journal {
      plugin = "akka.persistence.journal.leveldb"
      leveldb.dir = "target/journal"
    }
    //    snapshot-store{
    //      plugin = "akka.persistence.snapshot-store.local"
    //      local.dir = "target/snapshots"
    //    }
  }
}


redis {
  host = ${server_ip}
  # redis server: port
  port = 6379
  # redis server: database number (optional)
  database = 0
  # authentication password (optional)
  password = f30947750c70c88f7f8be99315a33155d6d6b32db5d1ade6d96ceea6dd2ecc1c
}




